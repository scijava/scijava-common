/*
 * #%L
 * SciJava Common shared library for SciJava software.
 * %%
 * Copyright (C) 2009 - 2023 SciJava developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

assertTrue(message, condition) {
	if (!condition) {
		throw new Exception(message);
	}
}

assertEquals(a, b) {
	if (a !=b && (a == null || !a.equals(b))) {
		throw new Exception("Not equal: " + a + " != " + b);
	}
}

readAsString(file) {
	builder = new StringBuilder();
	reader = new BufferedReader(new FileReader(file));
	for (;;) {
		line = reader.readLine();
		if (line == null) {
			break;
		}
		if (builder.length() > 0) {
			builder.append('\n');
		}
		builder.append(line);
	}
	reader.close();
	return builder.toString();
}

annotationIndex = new File(basedir,
	"target/classes/META-INF/json/org.scijava.annotations.its.CustomAnnotation");

assertTrue("File does not exist: " + annotationIndex, annotationIndex.exists());

expect = readAsString(new File(basedir, "src/test/resources/expect"));
actual = readAsString(annotationIndex);
assertEquals(expect, actual);
