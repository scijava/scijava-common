<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.scijava</groupId>
	<artifactId>pom-scijava</artifactId>
	<version>1.29</version>
	<packaging>pom</packaging>

	<name>SciJava Projects</name>
	<description>SciJava aims to provide an overview of available Java libraries for scientific computing. This POM provides a parent from which participating projects can declare their build configurations. It ensures that projects all use a compatible build environment, including Java version, as well as versions of dependencies and plugins.</description>
	<url>http://www.scijava.org/</url>
	<inceptionYear>2011</inceptionYear>

	<properties>
		<imagej.groupId>net.imagej</imagej.groupId>
		<imagej.version>2.0.0-SNAPSHOT</imagej.version>
		<imagej1.version>[1.45s,)</imagej1.version>
		<imglib1.groupId>mpicbg</imglib1.groupId>
		<imglib1.version>2.0.0-SNAPSHOT</imglib1.version>
		<imglib2.groupId>net.imglib2</imglib2.groupId>
		<imglib2.version>2.0.0-SNAPSHOT</imglib2.version>
		<jetty.version>8.0.0.M1</jetty.version>
		<junit.version>4.8.1</junit.version>
		<mpicbg.groupId>mpicbg</mpicbg.groupId>
		<mpicbg.version>20111128</mpicbg.version>
		<nar.version>2.1-SNAPSHOT</nar.version>
		<scifio.groupId>loci</scifio.groupId>
		<scifio.version>4.5-SNAPSHOT</scifio.version>
		<scijava-common.groupId>${project.groupId}</scijava-common.groupId>
		<scijava-common.version>1.0.0-SNAPSHOT</scijava-common.version>
		<sezpoz.version>1.9</sezpoz.version>

		<!-- NB: Avoid platform encoding warning when copying resources. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- NB: Specify formatting of the maven.build.timestamp property. -->
		<maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
	</properties>

	<build>
		<!-- It is nice for "mvn" with no arguments to do something reasonable. -->
		<defaultGoal>install</defaultGoal>

		<plugins>
			<!-- Enable copying the artifacts and dependencies by setting
			     the 'imagej.app.directory' property to a valid directory -->
			<plugin>
				<groupId>net.imagej</groupId>
				<artifactId>imagej-maven-plugin</artifactId>
				<version>0.1.0</version>
				<executions>
					<execution>
						<id>copy-jars</id>
						<phase>install</phase>
						<goals>
							<goal>copy-jars</goal>
						</goals>
					</execution>
					<execution>
						<id>set-rootdir</id>
						<phase>validate</phase>
						<goals>
							<goal>set-rootdir</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<!-- We use wagon-webdav-jackrabbit 1.0 for deploys, since it is
		     compatible with both Maven 2.2.x and Maven 3.0.x cross-platform. -->
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav-jackrabbit</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>

		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.3</version>
				</plugin>

				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.5</version>
					<!-- Require the Java 6 platform. -->
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.7</version>
				</plugin>

				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.3.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
					<!-- Always add classpath to JAR manifests. -->
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
							<manifestEntries>
								<!-- Add SCM revision from buildnumber plugin, if available. -->
								<Implementation-Build>${buildNumber}</Implementation-Build>
								<!-- Add a formatted timestamp for the build. -->
								<Implementation-Date>${maven.build.timestamp}</Implementation-Date>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-plugin-plugin</artifactId>
					<version>2.9</version>
				</plugin>

				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.2</version>
					<!-- Build source JARs in addition to binary ones. -->
					<executions>
						<execution>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.12</version>
					<!-- Make sure unit tests run with sufficient RAM allocated. -->
					<configuration>
						<argLine>-Xms512m -Xmx512m</argLine>
					</configuration>
				</plugin>

				<!-- Enable support for the Maven buildnumber plugin. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.1</version>
					<!-- Record SCM revision in manifest. -->
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>create</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
						<revisionOnScmFailure>UNKNOWN</revisionOnScmFailure>
					</configuration>
				</plugin>

				<!-- Enable support for the Maven exec plugin. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.2.1</version>
				</plugin>

				<!-- Enable support for the Maven license plugin. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>1.4</version>
				</plugin>

				<!-- Enable support for the Maven versions plugin.
				     Check for new plugin versions using
				     "mvn versions:display-plugin-updates" -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>1.3.1</version>
				</plugin>

				<!-- Enable support for the Maven graph plugin.
				     Generate a dependency graph using "mvn graph:reactor" -->
				<plugin>
					<groupId>org.fusesource.mvnplugins</groupId>
					<artifactId>maven-graph-plugin</artifactId>
					<version>1.26</version>
					<configuration>
						<hideScopes>provided,runtime,system,test</hideScopes>
						<hideTransitive>true</hideTransitive>
						<label>Dependency Graph for ${project.name}</label>
						<target>${project.build.directory}/dependency-graph.dot</target>
					</configuration>
				</plugin>

				<!-- With a recent version of m2e, Eclipse's Maven binding, it is no
				     longer enough to configure plugins, they will be ignored by
				     default. But we really want the buildnumber and the jar plugin to
				     do their job. So now we have to add lifecycle mappings in addition
				     to configuring the plugins.

				     Let's hope that m2e remains the only IDE Maven binding that
				     requires such a lot of additional work just to get the same result
				     as plain Maven would produce out of the box. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>create</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-jar-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>jar</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>net.imagej</groupId>
										<artifactId>imagej-maven-plugin</artifactId>
										<versionRange>[0.1.0,)</versionRange>
										<goals>
											<goal>set-rootdir</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore/>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>
			<!-- Generate javadocs as part of site generation. -->
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<maxmemory>1024m</maxmemory>
					<!-- Workaround for javadoc bug when classes in the default
					     package access classes from non-default packages. See:
					     http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5101868 -->
					<use>false</use>
					<links>
						<link>https://pivot.apache.org/2.0.2/docs/api/</link>
						<link>http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/reference/api/</link>
						<link>http://docs.oracle.com/javase/6/docs/api/</link>
						<link>http://download.java.net/media/java3d/javadoc/1.5.2/</link>
						<link>http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/javadoc/</link>
						<link>http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/</link>
						<link>http://www.randelshofer.ch/oop/jhotdraw/JavaDoc/</link>
					</links>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<organization>
		<name>SciJava</name>
		<url>http://www.scijava.org/</url>
	</organization>

	<prerequisites>
		<maven>2.2.1</maven>
	</prerequisites>

	<!-- The following configuration enables access to dependencies
	     from a number of useful third-party Maven repositories.

	     In general, it is considered bad practice to include repository URLs
	     within a pom.xml: http://bit.ly/8aN6NZ

	     However, the article does mention one exception:
	     "If however, you have artifacts that may exist only in your repository
	     (think snapshots of your parent POMs), or other third party repos, then
	     developers will have a hard time building your source. Only in this case
	     does it make sense to add repository entries to your POMs."

	     This is precisely the rationale for why we include the entries here.
	     -->
	<repositories>
		<!-- LOCI projects -->
		<repository>
			<id>imagej.releases</id>
			<url>http://maven.imagej.net/content/repositories/releases</url>
		</repository>
		<repository>
			<id>imagej.snapshots</id>
			<url>http://maven.imagej.net/content/repositories/snapshots</url>
		</repository>

		<!-- Various dependencies -->
		<repository>
			<id>imagej.thirdparty</id>
			<url>http://maven.imagej.net/content/repositories/thirdparty</url>
		</repository>

		<!-- SezPoz -->
		<repository>
			<id>java.net</id>
			<url>http://download.java.net/maven/2</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<!-- maven-graph-plugin -->
		<pluginRepository>
			<id>mvnplugins.fusesource.org</id>
			<url>http://mvnplugins.fusesource.org/repo/release</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</pluginRepository>

		<!-- maven-nar-plugin, cppwrap-maven-plugin -->
		<pluginRepository>
			<id>imagej.releases</id>
			<url>http://maven.imagej.net/content/repositories/releases</url>
		</pluginRepository>
		<pluginRepository>
			<id>imagej.snapshots</id>
			<url>http://maven.imagej.net/content/repositories/snapshots</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>imagej.thirdparty</id>
			<url>http://maven.imagej.net/content/repositories/thirdparty</url>
		</pluginRepository>
	</pluginRepositories>

	<!-- The following configuration allows authorized developers
	     to deploy artifacts to the ImageJ Maven repository. -->
	<distributionManagement>
		<repository>
			<id>imagej.releases</id>
			<name>ImageJ Releases Repository</name>
			<url>dav:http://maven.imagej.net/content/repositories/releases</url>
		</repository>
		<snapshotRepository>
			<id>imagej.snapshots</id>
			<name>ImageJ Snapshots Repository</name>
			<url>dav:http://maven.imagej.net/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

</project>
